1. /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(List

		int data;
		Node next;
		Node(int d)
		{
			data = d;
			next = null;
		}
	}

	void printlist(Node node)
	{
		if (node == null) {
			return;
		}
		while (node != null) {
			System.out.print(node.data + " -> ");
			node = node.next;
		}
	}

	Node reverselist(Node node)
	{
		Node prev = null, curr = node, next;
		while (curr != null) {
			next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
		}
		node = prev;
		return node;
	}

	void rearrange(Node node)
	{
		Node slow = node, fast = slow.next;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}

		Node node1 = node;
		Node node2 = slow.next;
		slow.next = null;
		node2 = reverselist(node2);
		node = new Node(0); 
		Node curr = node;
		while (node1 != null || node2 != null) {
			if (node1 != null) {
				curr.next = node1;
				curr = curr.next;
				node1 = node1.next;
			}
			if (node2 != null) {
				curr.next = node2;
				curr = curr.next;
				node2 = node2.next;
			}
		node = node.next;
	}

	public static void main(String[] args)
	{

		LinkedList list = new LinkedList();
		list.head = new Node(1);
		list.head.next = new Node(2);
		list.head.next.next = new Node(3);
		list.head.next.next.next = new Node(4);
		list.head.next.next.next.next = new Node(5);

		list.printlist(head); 
		list.rearrange(head); 
		System.out.println("");
		list.printlist(head); 
	}
}

2. 
/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */class MinStack {
public:
    
    stack<int>st;
    int minInStack = INT_MAX;
   
    void push(int x) {
        if(x <= minInStack){
            st.push(minInStack);
            minInStack = x;
        }
        st.push(x);
    }
    
    void pop() {
       int tmp = st.top();
        st.pop();
        if(tmp == minInStack){
            minInStack = st.top();
            st.pop();
        }
    }
    
    int top() {
        return st.top();
    }
    
    int getMin() {
        return minInStack;
    }
};

3. /**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 *//* Java Program to implement a stack using
two queue */

class GfG {

	static class Stack {
		static Queue<Integer> q1 = new LinkedList<Integer>();
		static Queue<Integer> q2 = new LinkedList<Integer>();

	
		static int curr_size;

		Stack()
		{
			curr_size = 0;
		}

		static void push(int x)
		{
			curr_size++;
			q2.add(x);

		
			while (!q1.isEmpty()) {
				q2.add(q1.peek());
				q1.remove();
			}
			Queue<Integer> q = q1;
			q1 = q2;
			q2 = q;
		}

		static void pop()
		{
			if (q1.isEmpty())
				return;
			q1.remove();
			curr_size--;
		}

		static int top()
		{
			if (q1.isEmpty())
				return -1;
			return q1.peek();
		}

		static int size()
		{
			return curr_size;
		}
	}

	public static void main(String[] args)
	{
		Stack s = new Stack();
		s.push(1);
		s.push(2);
		s.push(3);

		System.out.println("current size: " + s.size());
		System.out.println(s.top());
		s.pop();
		System.out.println(s.top());
		s.pop();
		System.out.println(s.top());

		System.out.println("current size: " + s.size());
	}
}class MyQueue 

class GFG
{
static class Queue
{
	static Stack<Integer> s1 = new Stack<Integer>();
	static Stack<Integer> s2 = new Stack<Integer>();

	static void enQueue(int x)
	{
		
		while (!s1.isEmpty())
		{
			s2.push(s1.pop());
	
		}

	
		s1.push(x);

		while (!s2.isEmpty())
		{
			s1.push(s2.pop());
		
		}
	}

	static int deQueue()
    {
	if (s1.isEmpty())
		{
			System.out.println("Q is Empty");
			System.exit(0);
		}
		int x = s1.peek();
		s1.pop();
		return x;
	}
};
public static void main(String[] args)
{
	Queue q = new Queue();
	q.enQueue(1);
	q.enQueue(2);
	q.enQueue(3);

	System.out.println(q.deQueue());
	System.out.println(q.deQueue());
	System.out.println(q.deQueue());

  
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
4.
